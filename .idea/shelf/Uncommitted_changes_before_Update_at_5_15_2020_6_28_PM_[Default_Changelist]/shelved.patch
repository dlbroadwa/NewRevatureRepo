Index: Coaster_manager/src/main/java/servlets/EmployeeServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package servlets;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.JsonObject;\r\nimport data.SQLDatabaseEmployees;\r\nimport models.Employee;\r\nimport utils.PostgresConnectionUtil;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Project 2\r\n *\r\n * This servlet is used for API calls involving employees.\r\n * It implements the doGet, doPost, doPUt, and doDelete methods\r\n * for DAO interaction.\r\n *\r\n * Json responses added with assistnce from Jean Adolf and Paityn Maynard\r\n *\r\n * Modifications:\r\n * Reginald Jefferson   - 5/15/20\r\n *                      - added missing constructor for doPut so values can be updated.\r\n *\r\n * @author Reginald Jefferson\r\n * @version 05/13/2020\r\n */\r\npublic class EmployeeServlet extends HttpServlet {\r\n    /**\r\n     * @param req\r\n     * @param resp\r\n     * @throws ServletException\r\n     * @throws IOException\r\n     */\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        String json = null;\r\n        SQLDatabaseEmployees employees = new SQLDatabaseEmployees(new PostgresConnectionUtil());\r\n\r\n        if (req.getHeader(\"find\").equals(\"all\")) {\r\n            List<Employee> employeeList = employees.findAll();\r\n            Map<String, ArrayList> options = new LinkedHashMap<>();\r\n            options.put(\"employees\", (ArrayList) employeeList);\r\n\r\n            json = new Gson().toJson(options);\r\n            resp.setContentType(\"application/json;charset=UTF-8\");\r\n            resp.getWriter().write(json);\r\n        }\r\n        else if (req.getHeader(\"find\").equals(\"id\")) {\r\n            Employee employee = null;\r\n            Map<String, String> options = new LinkedHashMap<>();\r\n            try {\r\n                int id = req.getIntHeader(\"id\");\r\n                employee = employees.findByID(id);\r\n\r\n                options.put(\"id\", (String.valueOf(employee.getId())));\r\n                options.put(\"fName\", (String.valueOf(employee.getFname())));\r\n                options.put(\"lName\", (String.valueOf(employee.getLname())));\r\n                options.put(\"phnNum\", (String.valueOf(employee.getPhoneNum())));\r\n                options.put(\"email\", (String.valueOf(employee.getEmail())));\r\n\r\n                json = new Gson().toJson(options);\r\n                resp.setContentType(\"application/json;charset=UTF-8\");\r\n                resp.getWriter().write(json);\r\n            }\r\n            catch(Exception e){\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param req\r\n     * @param resp\r\n     * @throws ServletException\r\n     * @throws IOException\r\n     */\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        JsonObject data = new Gson().fromJson(req.getReader(), JsonObject.class);\r\n        String json = null;\r\n        if (data.get(\"add\").getAsString().equals(\"new\")) {\r\n            try {\r\n                String fName = data.get(\"fName\").getAsString();\r\n                String lName = data.get(\"lName\").getAsString();\r\n                String phnNum = data.get(\"phnNum\").getAsString();\r\n                String email = data.get(\"email\").getAsString();\r\n                String pword = data.get(\"pword\").getAsString();\r\n                int bossId = data.get(\"bossId\").getAsInt();\r\n                boolean admin = data.get(\"admin\").getAsBoolean();\r\n\r\n                Employee employee = new Employee(fName, lName,phnNum, email, pword, bossId, admin);\r\n                SQLDatabaseEmployees employees = new SQLDatabaseEmployees(new PostgresConnectionUtil());\r\n                employees.add(employee);\r\n\r\n                Map<String, String> options = new LinkedHashMap<>();\r\n                options.put(\"fName\", (String.valueOf(employee.getFname())));\r\n                options.put(\"lName\", (String.valueOf(employee.getLname())));\r\n                options.put(\"phnNum\", (String.valueOf(employee.getPhoneNum())));\r\n                options.put(\"email\", (String.valueOf(employee.getEmail())));\r\n                options.put(\"pword\", (String.valueOf(employee.getPword())));\r\n                options.put(\"bossID\", (String.valueOf(employee.getBossid())));\r\n                options.put(\"admin\", (String.valueOf(employee.isAdmin())));\r\n\r\n                json = new Gson().toJson(options);\r\n                resp.setContentType(\"application/json;charset=UTF-8\");\r\n                resp.getWriter().write(json);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        else if (data.get(\"add\").getAsString().equals(\"login\")) {\r\n            try {\r\n                Employee loginCheck = new SQLDatabaseEmployees(new PostgresConnectionUtil())\r\n                        .findByID(data.get(\"id\").getAsInt());\r\n                if (loginCheck == null) {\r\n                    Map<String, String> options = new LinkedHashMap<>();\r\n                    options.put(\"notice\", \"No account exits. Make a new accoutn please.\");\r\n                    json = new Gson().toJson(options);\r\n                    resp.setContentType(\"application/json;charset=UTF-8\");\r\n                    resp.getWriter().write(json);\r\n                }\r\n                else if (loginCheck.getPword().equals(data.get(\"pword\").getAsString())) {\r\n                    Map<String, String> options = new LinkedHashMap<>();\r\n                    options.put(\"email\", loginCheck.getEmail());\r\n                    options.put(\"adminPriv\", (String.valueOf(loginCheck.isAdmin())));\r\n                    json = new Gson().toJson(options);\r\n                    resp.setContentType(\"application/json;charset=UTF-8\");\r\n                    resp.getWriter().write(json);\r\n                }\r\n                else {\r\n                    Map<String, String> options = new LinkedHashMap<>();\r\n                    options.put(\"message\", \"The password entered doesn't match our records.\");\r\n                    json = new Gson().toJson(options);\r\n                    resp.setContentType(\"application/json;charset=UTF-8\");\r\n                    resp.getWriter().write(json);\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                Map<String, String> options = new LinkedHashMap<>();\r\n                options.put(\"message\", \"The email entered doesn't match our records.\");\r\n                json = new Gson().toJson(options);\r\n                resp.setContentType(\"application/json;charset=UTF-8\");\r\n                resp.getWriter().write(json);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param req\r\n     * @param resp\r\n     * @throws ServletException\r\n     * @throws IOException\r\n     */\r\n    @Override\r\n    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        JsonObject data = new Gson().fromJson(req.getReader(),JsonObject.class);\r\n        if(data.get(\"update\") == null) {\r\n            String json = null;\r\n            try {\r\n                int id = req.getIntHeader(\"id\");\r\n\r\n                String fName = data.get(\"fName\").getAsString();\r\n                String lName = data.get(\"lName\").getAsString();\r\n                String phnNum = data.get(\"phnNum\").getAsString();\r\n                String email = data.get(\"email\").getAsString();\r\n                String pword = data.get(\"pword\").getAsString();\r\n                boolean admin = data.get(\"admin\").getAsBoolean();\r\n\r\n                Employee employee = new Employee(fName, lName, phnNum, email, pword, admin);\r\n                SQLDatabaseEmployees employees = new SQLDatabaseEmployees((new PostgresConnectionUtil()));\r\n                employees.update(id, employee);\r\n\r\n                Map<String, String> options = new LinkedHashMap<>();\r\n                options.put(\"fName\", (String.valueOf(employee.getFname())));\r\n                options.put(\"lName\", (String.valueOf(employee.getLname())));\r\n                options.put(\"phnNum\", (String.valueOf(employee.getPhoneNum())));\r\n                options.put(\"email\", (String.valueOf(employee.getEmail())));\r\n                options.put(\"pword\", (String.valueOf(employee.getPword())));\r\n                options.put(\"admin\", (String.valueOf(employee.isAdmin())));\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param req\r\n     * @param resp\r\n     * @throws ServletException\r\n     * @throws IOException\r\n     */\r\n    @Override\r\n    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        JsonObject data = new Gson().fromJson(req.getReader(), JsonObject.class);\r\n        if(!(data.get(\"remove\") == null)) {\r\n            String json = null;\r\n            try {\r\n                int id = data.get(\"id\").getAsInt();\r\n\r\n                SQLDatabaseEmployees employees = new SQLDatabaseEmployees(new PostgresConnectionUtil());\r\n//                Employee employee = employees.findByID(id);\r\n                employees.remove(id);\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Coaster_manager/src/main/java/servlets/EmployeeServlet.java	(revision 9a4e9500696a3bfba0c74371f96d191c9df94b61)
+++ Coaster_manager/src/main/java/servlets/EmployeeServlet.java	(date 1589581721943)
@@ -206,9 +206,11 @@
                 int id = data.get("id").getAsInt();
 
                 SQLDatabaseEmployees employees = new SQLDatabaseEmployees(new PostgresConnectionUtil());
-//                Employee employee = employees.findByID(id);
+                Employee employee = employees.findByID(id);
                 employees.remove(id);
 
+                Map<String,String> options = new LinkedHashMap<>();
+
             } catch (Exception e) {
                 e.printStackTrace();
             }
